{"version":3,"sources":["SymbolList.jsx","SearchForm.jsx","App.js","serviceWorker.js","index.js"],"names":["SymbolList","handleClick","data","props","remove","generateLists","map","item","messagesToRender","messages","message","Card","key","id","style","width","Img","height","variant","src","user","avatar_url","Title","username","Text","body","Footer","created_at","symbol","text","length","Button","onClick","this","twitList","listToRender","React","Component","SearchForm","onSymbolButtonClick","symbolToRemove","filteredSymbols","state","stockSymbols","filter","stockSymbol","setState","handleChange","event","splitTarget","target","value","toUpperCase","split","combinedTarget","concat","filteredTarget","Set","symbolsToAdd","twits","symbolsToRemove","prevProps","prevState","clearInterval","timer","searchTwits","setInterval","forEach","fetch","method","then","res","ok","json","Promise","reject","statusText","updatedTwits","preventDefault","combinedSymbols","validatedSymbols","Col","Form","onSubmit","addInputToState","Group","controlId","Label","Control","required","type","placeholder","onChange","App","className","rel","href","integrity","crossOrigin","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3ead8918.chunk.js","sourcesContent":["/* eslint-disable consistent-return */\n/* eslint-disable no-debugger */\n/* eslint-disable react/destructuring-assignment */\n/* eslint-disable react/state-in-constructor */\n/* eslint-disable react/prop-types */\nimport React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport CardColumn from 'react-bootstrap/CardColumns';\nimport CashtagLink from 'stocktwits-react-text-js';\n\nexport default class SymbolList extends React.Component {\n  handleClick = (data) => {\n    this.props.remove(data);\n  };\n\n  generateLists = (data) => {\n    const listToRender = data.map((item) => {\n      // const imageUrl = message.user.avatar_url + '/100px100';\n      const messagesToRender = item.messages.map((message) => (\n        <Card key={message.id} style={{ width: '18rem' }}>\n          <Card.Img style={{ width: '50px', height: '50px' }} variant=\"top\" src={message.user.avatar_url} />\n          <Card.Title>{message.user.username}</Card.Title>\n          <Card.Text>{message.body}</Card.Text>\n          <Card.Footer>{message.created_at}</Card.Footer>\n        </Card>\n      ));\n      return (\n        <CardColumn key={item.symbol.symbol}>\n          <h2><CashtagLink text={item.symbol.symbol}/></h2>\n          <p>\n            Number of messages:\n            {item.messages.length}\n          </p>\n          <Button onClick={() => this.handleClick(item.symbol.symbol)}>\n            Click to Close\n          </Button>\n          {messagesToRender}\n        </CardColumn>\n      );\n    });\n    return listToRender;\n  };\n\n  render() {\n    const data = this.props.twitList;\n    const listToRender = this.generateLists(data);\n    return (\n      <div>\n        {listToRender}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport SymbolList from './SymbolList';\n\nclass SearchForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      stockSymbols: [],\n      value: '',\n      message: '',\n      twits: [],\n      symbolsToRemove: '',\n      symbolsToAdd: [],\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    clearInterval(this.timer)\n    if (prevState.stockSymbols !== this.state.stockSymbols) {\n      this.searchTwits();\n    }\n    this.timer = setInterval(() => {\n      if (this.state.stockSymbols) {\n        return this.searchTwits();\n      }\n    }, 10000);\n  }\n\n  componentWillUnmount() {\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n  }\n\n  onSymbolButtonClick = (symbolToRemove) => {\n    const filteredSymbols = this.state.stockSymbols.filter((stockSymbol) => stockSymbol !== symbolToRemove);\n    this.setState({\n      stockSymbols: filteredSymbols,\n    });\n  };\n\n\n  handleChange = (event) => {\n    const upperCaseTarget = event.target.value.toUpperCase();\n    const splitTarget = upperCaseTarget.split(' ');\n    const combinedTarget = this.state.stockSymbols.concat(splitTarget)\n    const filteredTarget = [...new Set(combinedTarget)]\n    this.setState({\n      value: event.target.value,\n      symbolsToAdd: filteredTarget,\n    });\n  };\n\n  searchTwits() {\n    const { stockSymbols } = this.state;\n    this.setState({\n      twits: [],\n    });\n    if (stockSymbols) {\n      stockSymbols.forEach((symbol) => {\n        fetch(`https://stocktwits-server.herokuapp.com/${symbol}`, {\n          method: 'GET',\n        })\n          .then((res) => {\n            if (!res.ok) {\n              this.setState({\n                message: 'Search failed. Please try again.',\n              });\n              return Promise.reject(res.statusText);\n            }\n            return res.json();\n          })\n          .then((res) => {\n            const updatedTwits = this.state.twits.concat(res);\n            this.setState({\n              twits: updatedTwits,\n              message: '',\n            });\n          });\n      });\n    }\n  }\n\n  addInputToState(event) {\n    event.preventDefault();\n    if (this.state.stockSymbols.length > 9) {\n      this.setState({\n        message: 'Max number of symbols reached.',\n      });\n    }\n      const { stockSymbols, symbolsToAdd } = this.state;\n      const combinedSymbols = stockSymbols.concat(symbolsToAdd)\n      const validatedSymbols = [...new Set(combinedSymbols)]\n      this.setState({\n        stockSymbols: validatedSymbols,\n        value: '',\n        message: '',\n        symbolsToAdd: [],\n      });\n  }\n\n\n  render() {\n    const { message } = this.state;\n    if (this.state.stockSymbols.length >= 1) {\n      return (\n        <Col>\n          <h1>Stocktwit Searcher</h1>\n          <p>Enter stock symbols to search. You may input multiple symbols with spaces separating.</p>\n          <Form onSubmit={(event) => this.addInputToState(event)}>\n            <Form.Group controlId=\"formStockSymbols\">\n              <Form.Label>Search</Form.Label>\n              <Form.Control required type=\"text\" placeholder=\"Input stock symbols\" value={this.state.value} onChange={(event) => this.handleChange(event)} />\n              {message}\n            </Form.Group>\n            <Button variant=\"primary\" type=\"submit\">\n            Submit\n            </Button>\n          </Form>\n          <SymbolList twitList={this.state.twits} remove={this.onSymbolButtonClick} />\n        </Col>\n      );\n    }\n\n    return (\n      <Col>\n        <h1>Stocktwit Searcher</h1>\n        <p>Enter stock symbols to search. You may input multiple symbols with spaces separating.</p>\n        <Form onSubmit={(event) => this.addInputToState(event)}>\n          <Form.Group controlId=\"formStockSymbols\">\n            <Form.Label>Search</Form.Label>\n            <Form.Control required type=\"text\" placeholder=\"Input stock symbols\" value={this.state.value} onChange={(event) => this.handleChange(event)} />\n            {message}\n          </Form.Group>\n          <Button variant=\"primary\" type=\"submit\">\n          Submit\n          </Button>\n        </Form>\n      </Col>\n    );\n  }\n}\n\nexport default SearchForm;\n","import React from 'react';\nimport SearchForm from './SearchForm';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SearchForm />\n      <link\n      rel=\"stylesheet\"\n      href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n      integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\"\n      crossOrigin=\"anonymous\"\n    />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}